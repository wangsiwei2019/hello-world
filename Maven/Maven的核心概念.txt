Maven的核心概念
1)约定的目录结构
2)pom
3)坐标
4)依赖
5)仓库
6)生命周期/插件/目标
7）继承
8）聚合
创建第一个Maven项目
    1)创建约定的目录结构
            根目录：工程名
            src目录：源码
            pom.xml文件：Maven工程的核心配置文件
            main目录：存放主程序
            test目录：存放测试程序
            java目录：存放Java元文件
            resources目录：存放框架或其他工具的配置文件
     2）为什么要遵守约定的目录结构
            Maven要负责我们这个项目的自动化构建，以编译为例，Maven要想自动进行编译
，那么它必须知道java源文件保存在哪里
            如果我们自己定义的东西要想让框架或工具知道，有两种方法
                    以配置的方式明确告诉框架
                    遵守框架内部存在的约定
                          log4j.properties
                          log4j.xml

             约定>配置>编码

POM：
       含义：Project  Object  Mode项目对象模型
                 DOM DocumentObject Model文档对象模型
       pom.xml对于Maven工程的核心配置文件，与构建过程相关的一切设置
都在这个文件中进行配置
                  重要程度相当于web.xml对于动态web工程的重要程度




坐标：
        数学中的坐标：
                         1.在平面上使用xy两个向量可以唯一的定位平面中的任何一个点
                         2.在空间中使用xyz三个向量可工程以唯一的定位空间中的任何一个点
        Maven的坐标：
                          使用下面三个向量在仓库中唯一定位一个maven
                           1.groupid：公司或组织域名倒序+项目名
                                     <groupid>com.wang.maven</groupid>
                           2.artifactid：模块名
                                      <artifactid>hello</artifactid>
                           3.version： 版本
                                       <version>4.0.0</version>
        Maven工程的坐标与仓库中路径的对应关系：
                   com/wang/hello/4.0.0/hello-4.0.0.jar
                         


仓库：
    仓库的分类：
              本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务
              远程仓库：
                      1.私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务
                      2.中央仓库：架设在internet上，为全世界所有的Maven工程服务
                      3.中央仓库镜像：架设 在各大洲，为中央仓库分担流量，减轻中央仓库的压力
同时更快的响应用户请求                        
            仓库中保存的内容：Maven工程
                   Maven自身需要的插件
                   第三方框架或工具的jar包
                   我们自己开发的Maven工程






依赖：
     Maven执行编译命令时会到本地仓库中查找被依赖的jar包
             对于我们自己开发的Maven工程，使用install命令安装后就可以进入仓库
     依赖的范围：
            1.compile范围的依赖：
                     对主程序是否有效：有效
                     对测试程序是否有效：有效
                     是否参与打包：参与
                     是否参与部署：参与
            2.test范围的依赖：
                     对主程序是否有效：有效
                     对测试程序是否有效：有效
                     是否参与打包：不参与
            3.provided范围的依赖：
                     对主程序是否有效：有效
                     对测试程序是否有效：有效
                     是否参与打包：不参与
     依赖的传递性：
           好处：可以传递的依赖不必在每个模块工程中都重复声明，只需要在“最下面”的工程
声明一次
          注意：compile形式的依赖可以为多个工程使用
                    test,provide只能在本工程使用，所以在使用的工程都需要自己添加
     依赖的排除：
         依赖排除的设置方式：
                    <exclusion></exclusion>
     依赖的原则：
           作用：解决模块工程之间的jar包冲突的问题
                    验证路径最短者优先原则
                    验证路径相同时先申明者优先
                    先声明指的是dependency标签的声明顺序
   统一管理依赖的版本：
                   现在一般使用的依赖版本是4.0.0
             自定义版本的配置方式：
                        1.使用properties标签内使用自定义标签统一声明版本号
                        2.在需要统一版本的位置，使用${自定义标签名}引用声明的版本号
             其实properties标签配合自定义标签声明数据的配置并不是只能用于声明依赖的版本号
统一声明后在引用场合都可以使用

                   

                          
       
生命周期：
      各个构建环节执行的顺序：不能打乱顺序，必须按照既定的
正确顺序来执行
      Maven的核心程序中定义了抽象的生命周期，生命周期中的各个阶段的具体任务
是由插件来完成的
      Maven核心程序为了更好的实现自动化构建，按照这以特点执行生命周期中的各个阶段
不论现在要执行的是周期的哪一个阶段，都是从生命周期初始的位置开始执行的。
      插件和目标：
              生命周期的各个阶段仅仅定义了要执行的任务是什么
               各个阶段和插件的目标是一致的
               相应的目标由特定的插件来完成   



继承：
    现状：不同的工程依赖的junit版本不同
              由于test范围的依赖不能传递，所以必然会分散在各个模块工程当中，
很容易造成版本不一致
    需求：统一管理各个模块工程中对junit依赖的版本
    解决思路：将junit依赖版本统一提取到“父"工程中，在子工程中声明junit依赖时不指定版本
以父工程中的统一设定的为准，同时也便于修改
    操作步骤：
                1.创建一个maven工程作为父工程，注意：打包的方式为pom
                2.在子工程中声明对父工程的引用
                                      <parent></parent>进行引用
                3.将子工程和父工程坐标重复的内容删除
                4.在父工程中统一管理junit的依赖
               <dependencyManagement>
                    <dependencies>
                    <dependency></dependency>
                                  </dependencies>
               </dependencyManagement>
                    使用此标签统一配置junit
                5.在子工程中删除junit依赖的版本号部分
       注意：配置继承后要首先安装子工程

         




聚合：
      作用：一键安装各个模块工程（不再需要考虑会有一些子工程是否被安装，导致项目运行失败）
      配置方式：在一个“总的聚合工程”中配置各个参与聚合的模块
                   <modules>
               <module>../工程名</module>
                    </modules>使用这个标签进行聚合
                       

部署：mvn deploy    
      
      

       
        

                    
